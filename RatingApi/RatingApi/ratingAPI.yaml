# a rating nem csak konyvekre szol hanem product-okra is es userId-hoz kotott
swagger: "2.0"
info:
  title: "Ratings Microservice"
  description: "A service to store and retrieve product ratings."
  version: "1.0.0"
schemes: [https, http]
consumes:
- application/json
produces:
- application/json
tags:
  - name: "Rating"
    description: "Requests related to product ratings"
parameters:
  id: 
    name: Id
    description: "The id of the rating"
    type: integer
    format: int32
    in: path
    required: true
  productId:
    name: productId
    description: "The id of the product being rated"
    in: body
    required: true
    schema:
      type: integer
  userId:
    name: userId
    description: "The id of the user that submitted the rating"
    type: integer
    format: int32
    in: path
    required: true
  rating:
    name: rating
    description: "The rating value (e.g., 1-5)"
    in: body
    required: true
    schema: 
      type: integer
paths:
  /healthz:
    get:
      operationId: "LivenessProbe"
      description: "This operation can be used as a liveness probe to verify that the server is alive"
      tags: ["System"]
      responses:
        204:
          description: "The service is available"
        500:
          $ref: '#/resoponse/InternalServerErrorResponse'
  /readyz:
  '/ratings':
    get:
      operationId: "GetRatings"
      description: "Retrieve a list of product ratings"
      tags: [Rating]
      responses:
        200:
          description: "A successful response that lists product ratings"
          schema:
            type: array
            items: 
              $ref: '#/definitions/Rating'
  '/ratings/{userId}':
    get:
      operationId: "GetAllRatingsByUserId"
      description: "Retrieve a list of ratings that the given user submitted"
      tags: [Rating]
      parameters:
        - $ref: '#/parameters/userId'
      responses:
        200:
          description: "Successfully returned all ratings the user submitted"
          schema:
            type: array
            items:
              $ref: '#/definitions/Rating'
        404:
          description: "UserId not found"
  '/rating':
    post:
      operationId: "PostRating"
      description: "Submit a new product rating"
      tags: [Rating]
      parameters:
        - $ref: '#/parameters/rating'
      responses:
        201:
          description: "The product rating is successfully submitted"
        400:
          description: "Bad request"
  '/rating/{Id}':
    get:
      operationId: "GetRatingById"
      description: "Retrieve a product rating by its id"
      tags: [Rating]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "A successful response that retrieves a product rating by id"
          schema:
            $ref: '#/definitions/Rating'
        404:
          $ref: '#/responses/RatingNotFound'
    put:
      operationId: "UpdateRatingById"
      description: "Update a product rating by its id"
      tags: [Rating]
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/rating'
      responses:
        200:
          description: "The product rating with the given id is updated"
        404:
          $ref: '#/responses/RatingNotFound'
    delete:
      operationId: "DeleteRatingById"
      description: "Delete a product rating by its id"
      tags: [Rating]
      parameters:
        - $ref: '#/parameters/id'
      responses:
        204:
          description: "The product rating with the given id is deleted"
        404:
          $ref: '#/responses/RatingNotFound'
responses:
  RatingNotFound:
    description: "The rating with the given id is not found"
  InternalServerErrorResponse:
    description: "The server is unable to process this request"
    schema:
      $ref: '#/definitions/GenericErrorDto'
definitions:
  GenericErrorDto:
    type: "object"
    description: "Provides information on why the request was not fulfilled"
    properties:
      ErrorCode:
        type: "string"
        enum:
          - GenericError
          - InvalidRatnig
          - ProductNotFound
          - UserNotFound
        description: >
          Represents an error code describing the problem.
            - GenericError - Represents an unknown error.
            - InvalidRating - The rating is not a valid integer between 1-5 inclusive
            - UserNotFound - No user found with the given userId
            - ProductNotFound - No product found with the given productId
      Message:
        type: "string"
        description: "A human-readable explanation in English "
  Rating:
    type: "object"
    description: "A product rating"
    required: 
      - id
      - productId
      - userId
      - rating
    properties:
      id:
        type: integer
        format: int32
        description: "The id of the rating"
      productId:
        type: integer
        format: int32
        description: "The id of the rated product"
      userId:
        type: integer
        format: int32
        description: "The id of the user that submitted the rating"
      rating:
        type: integer
        format: int32
        description: "The rating value (e.g., 1-5)"
