/*
 * Ratings Microservice
 *
 * A service to store and retrieve product ratings.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace RatingApi.Models
{
    /// <summary>
    /// Provides information on why the request was not fulfilled
    /// </summary>
    [DataContract]
    public partial class GenericErrorDto : IEquatable<GenericErrorDto>
    {

        /// <summary>
        /// Represents an error code describing the problem.   - GenericError - Represents an unknown error.   - InvalidRating - The rating is not a valid integer between 1-5 inclusive   - UserNotFound - No user found with the given userId   - ProductNotFound - No product found with the given productId 
        /// </summary>
        /// <value>Represents an error code describing the problem.   - GenericError - Represents an unknown error.   - InvalidRating - The rating is not a valid integer between 1-5 inclusive   - UserNotFound - No user found with the given userId   - ProductNotFound - No product found with the given productId </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum GenericErrorEnum for Generic errors
            /// </summary>
            [EnumMember(Value = "GenericError")]
            GenericErrorEnum = 1,

            /// <summary>
            /// Enum RatingNotFoundEnum for valid valid rating id but non-existent ratings
            /// </summary>
            [EnumMember(Value = "RatingNotFound")]
            RatingNotFoundEnum = 2,
            
            /// <summary>
            /// Enum ProductNotFoundEnum for ProductNotFound
            /// </summary>
            [EnumMember(Value = "ProductNotFound")]
            ProductNotFoundEnum = 3,
            
            /// <summary>
            /// Enum UserNotFoundEnum for UserNotFound
            /// </summary>
            [EnumMember(Value = "UserNotFound")]
            UserNotFoundEnum = 4,

            /// <summary>
            /// Enum InvalidRatingIdEnum for InvalidRatingId
            /// </summary>
            [EnumMember(Value = "InvalidRatingId")]
            InvalidRatingId = 5,

            /// <summary>
            /// Enum InvalidUserIdEnum for InvalidUserId
            /// </summary>
            [EnumMember(Value = "InvalidUserId")]
            InvalidUserId = 6,

            /// <summary>
            /// Enum InvalidProductIdEnum for InvalidProductId
            /// </summary>
            [EnumMember(Value = "InvalidProductId")]
            InvalidProductId = 7,

            /// <summary>
            /// Enum RatingOutOfRangeEnum for RatingOutOfRange
            /// </summary>
            [EnumMember(Value = "RatingOutOfRange")]
            RatingOutOfRange = 8
        }

        /// <summary>
        /// Represents an error code describing the problem.   - GenericError - Represents an unknown error.   - InvalidRating - The rating is not a valid integer between 1-5 inclusive   - UserNotFound - No user found with the given userId   - ProductNotFound - No product found with the given productId 
        /// </summary>
        /// <value>Represents an error code describing the problem.   - GenericError - Represents an unknown error.   - InvalidRating - The rating is not a valid integer between 1-5 inclusive   - UserNotFound - No user found with the given userId   - ProductNotFound - No product found with the given productId </value>
        [DataMember(Name="ErrorCode", EmitDefaultValue=true)]
        public ErrorCodeEnum ErrorCode { get; set; }

        /// <summary>
        /// A human-readable explanation in English 
        /// </summary>
        /// <value>A human-readable explanation in English </value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenericErrorDto {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GenericErrorDto)obj);
        }

        /// <summary>
        /// Returns true if GenericErrorDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GenericErrorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenericErrorDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ErrorCode == other.ErrorCode ||
                    
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GenericErrorDto left, GenericErrorDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GenericErrorDto left, GenericErrorDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
