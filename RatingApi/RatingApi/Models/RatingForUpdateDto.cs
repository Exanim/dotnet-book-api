/*
 * Rating Microservice
 *
 * This microservice is a part of our Intern playground API collection. Its intended function is to store ratings of products, and be able to search for ratings based on the author of the rating and/or the product the rating is written about. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: martin-tibor.sandor@capgemini.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace RatingApi.Models
{
    /// <summary>
    /// Represents a rating object without the primary key, used to update an existing entry in the database
    /// </summary>
    [DataContract]
    public partial class RatingForUpdateDto : IEquatable<RatingForUpdateDto>
    {
        /// <summary>
        /// The Id of the author of the rating. Functionally a foreign key, but since users are stored in a different database, current implementation is TBD
        /// </summary>
        /// <value>The Id of the author of the rating. Functionally a foreign key, but since users are stored in a different database, current implementation is TBD</value>
        /// <example>15</example>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public int UserId { get; set; }

        /// <summary>
        /// The Id of the product being rated. Functionally a foreign key, but since products are stored in a different database, current implementation is TBD
        /// </summary>
        /// <value>The Id of the product being rated. Functionally a foreign key, but since products are stored in a different database, current implementation is TBD</value>
        /// <example>420</example>
        [DataMember(Name = "productId", EmitDefaultValue = true)]
        public int ProductId { get; set; }

        /// <summary>
        /// The rating contained in the rating object
        /// </summary>
        /// <value>The rating contained in the rating object</value>
        /// <example>The phone works fine, but the price seems overbearing given how little it improves on the previous model. Also, the camera seems to turn on sometimes by itself, is this something to worry about?</example>
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        public int RatingValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RatingForUpdateDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  RatingValue: ").Append(RatingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RatingForUpdateDto)obj);
        }

        /// <summary>
        /// Returns true if RatingForUpdateDto instances are equal
        /// </summary>
        /// <param name="other">Instance of RatingForUpdateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingForUpdateDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    UserId == other.UserId ||

                    UserId.Equals(other.UserId)
                ) &&
                (
                    ProductId == other.ProductId ||

                    ProductId.Equals(other.ProductId)
                ) &&
                (
                    RatingValue == other.RatingValue ||
                    RatingValue != null &&
                    RatingValue.Equals(other.RatingValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + UserId.GetHashCode();

                hashCode = hashCode * 59 + ProductId.GetHashCode();
                if (RatingValue != null)
                    hashCode = hashCode * 59 + RatingValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RatingForUpdateDto left, RatingForUpdateDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RatingForUpdateDto left, RatingForUpdateDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}