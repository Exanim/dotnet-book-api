/*
 * Ratings Microservice
 *
 * A service to store and retrieve product ratings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RatingApi.Entities;

// TODO: harom equals methodusbol melyik mit csinal

namespace RatingApi.Models
{ 
    /// <summary>
    /// A product rating
    /// </summary>
    [DataContract]
    public partial class RatingDto : IEquatable<RatingDto>
    {
        [Required]
        [DataMember(Name="ratingId")]
        public int Id { get; set; }

        /// <value>The id of the rated product</value>
        [Required]
        [DataMember(Name="productId")]
        public int ProductId { get; set; }

        /// <summary>
        /// The id of the user that submitted the rating
        /// </summary>
        /// <value>The id of the user that submitted the rating</value>
        [Required]
        [DataMember(Name="userId")]
        public int UserId { get; set; }

        /// <summary>
        /// The rating value (e.g., 1-5)
        /// </summary>
        /// <value>The rating value (e.g., 1-5)</value>
        [Required]
        [DataMember(Name="rating")]
        public int RatingValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rating {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RatingValue: ").Append(RatingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Rating)obj);
        }

        /// <summary>
        /// Returns true if Rating instances are equal
        /// </summary>
        /// <param name="other">Instance of Rating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rating other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    RatingValue == other.RatingValue ||
                    RatingValue != null &&
                    RatingValue.Equals(other.RatingValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (RatingValue != null)
                    hashCode = hashCode * 59 + RatingValue.GetHashCode();
                return hashCode;
            }
        }

        public bool Equals(RatingDto? other)
        {
            if (other is null)
            {
                return false;
            }

            if (Object.ReferenceEquals(this, other))
            {
                return true;
            }

            if (this.GetType() != other.GetType())
            {
                return false;
            }

            // Return true if the fields match.
            // Note that the base class is not invoked because it is
            // System.Object, which defines Equals as reference equality.
            return (Id == other.Id) && (ProductId == other.ProductId) && 
                   (this.UserId == other.UserId) && (this.RatingValue == other.RatingValue);
        }


        #region Operators
        #pragma warning disable 1591

        #pragma warning restore 1591
        #endregion Operators
    }
}
