/*
 * Ratings Microservice
 *
 * A service to store and retrieve product ratings.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

// TODO: Exception middleware, httpcliens interface

using System.ComponentModel.DataAnnotations;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using RatingApi.Entities;
using RatingApi.Models;
using RatingApi.Services;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using System.Net;

namespace RatingApi.Controllers
{
    /// <summary>
    /// Contains all http calls related to ratings
    /// </summary>
    [ApiController]
    public class RatingApiController : ControllerBase
    {
        private readonly ILogger<RatingApiController> _logger;
        private readonly IMapper _mapper;
        private readonly IRatingRepository _ratingRepository;
        private readonly IRatingClients _ratingClients;

        public RatingApiController(
            ILogger<RatingApiController> logger,
            IMapper mapper,
            IRatingRepository ratingRepository,
            IRatingClients ratingClients)
        {
            _logger = logger 
                           ?? throw new ArgumentNullException(nameof(logger));
            _mapper = mapper
                           ?? throw new ArgumentNullException(nameof(mapper));
            _ratingRepository = ratingRepository 
                           ?? throw new ArgumentNullException(nameof(ratingRepository));
            _ratingClients = ratingClients 
                           ?? throw new ArgumentNullException(nameof(ratingClients));
        }

        /// <summary>
        /// Returns a list of ratings depending on parameters
        /// With the parameter: userId this returns all ratings submitted by that user
        /// With the parameter: productId this returns all ratings for that product
        /// </summary>
        /// <remarks>Retrieve a list of product ratings</remarks>
        /// <response code="200">A successful response that lists product ratings</response>
        [HttpGet("ratings")]
        [SwaggerOperation("GetRatings")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Rating>), description: "A successful response that lists product ratings")]
        public virtual async Task<ActionResult<IEnumerable<RatingDto>>> GetRatings([FromQuery(Name = "userId")] int? userId,
            [FromQuery(Name = "productId")] int? productId)
        {
            var ratingEntities = await _ratingRepository.GetRatings(userId, productId);

            var results = _mapper.Map<IEnumerable<RatingDto>>(ratingEntities);

            _logger.LogDebug("Successfully listed all elements in the database");
            return Ok(results);
        }

        /// <summary>
        /// Returns a single rating corresponding to the given rating id
        /// </summary>
        /// <remarks>Retrieve a product rating by its id</remarks>
        /// <param name="id">The id of the rating</param>
        /// <response code="200">A successful response that retrieves a product rating by id</response>
        /// <response code="404">The rating with the given id is not found</response>
        [HttpGet("rating/{id}", Name = "GetRatingById")]
        [SwaggerOperation("GetRatingById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Rating), description: "A successful response that retrieves a product rating by id")]
        [SwaggerResponse(statusCode: 400, type: typeof(GenericErrorDto), description: "Invalid rating id (id has to be positive integer)")]
        [SwaggerResponse(statusCode: 404, type: typeof(GenericErrorDto), description: "Rating with the given id does not exist")]
        public virtual async Task<IActionResult> GetRatingById([FromRoute][Required] int id)
        {

            if (id < 1)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidRatingId,
                    Message = "Invalid rating id! Id has to be positive integer"
                };
                _logger.LogError("Request contained invalid id");
                return BadRequest(errorDto);
            }

            var rating = await _ratingRepository.GetRatingById(id);

            if (rating == null)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.RatingNotFoundEnum,
                    Message = "Entry not found!"
                };
                _logger.LogError("Requested id not found");
                return NotFound(errorDto);
            }
            _logger.LogDebug("Request GetRatingById successfully handled");
            return Ok(_mapper.Map<RatingDto>(rating));
        }

        /// <summary>
        /// Deletes all the ratings
        /// </summary>
        /// <response code="204">All the product ratings are deleted</response>
        [HttpDelete("ratings/")]
        [SwaggerOperation("DeleteAllRatings")]
        public virtual async Task<IActionResult> DeleteAllRatings()
        {
            _ratingRepository.DeleteAllRatings(); // Assuming you have a method for deleting all ratings in your repository.
            await _ratingRepository.SaveChangesAsync();
            _logger.LogDebug("All ratings have been successfully deleted");
            return NoContent();
        }


        /// <summary>
        /// Deletes a single rating corresponding to the given id
        /// </summary>
        /// <param name="id">The id of the rating</param>
        /// <response code="204">The product rating with the given id is deleted</response>
        /// <response code="404">The rating with the given id is not found</response>
        [HttpDelete("rating/{id}")]
        [SwaggerOperation("DeleteRatingById")]
        public virtual async Task<IActionResult> DeleteRatingById([FromRoute][Required] int id)
        {
            if (id < 1)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidRatingId,
                    Message = "Invalid rating id! Id has to be positive integer"
                };
                _logger.LogError("Request contained invalid id");
                return BadRequest(errorDto);
            }

            var rating = await _ratingRepository.GetRatingById(id);

            if (rating == null)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.RatingNotFoundEnum,
                    Message = "Rating with the given id does not exist"
                };
                _logger.LogError("Rating not found");
                return NotFound(errorDto);
            }

            _ratingRepository.DeleteRating(rating);
            await _ratingRepository.SaveChangesAsync();
            _logger.LogDebug($"Rating with id {rating.Id} and rating:\n {rating.RatingValue}\n has been successfully deleted");
            return NoContent();
        }

        /// <summary>
        /// Submits a rating contained in the body
        /// </summary>
        /// <remarks>Submit a new product rating</remarks>
        /// <param name="ratingToPost">The rating value (e.g., 1-5)</param>
        /// <response code="201">The product rating is successfully submitted</response>
        /// <response code="400">Bad request</response>
        [HttpPost("rating/")]
        [Consumes("application/json")]
        [SwaggerOperation("PostRating")]
        [SwaggerResponse(statusCode: 201, type: typeof(RatingDto), description: "The rating has been successfully submitted!")]
        public virtual async Task<ActionResult<RatingDto>> PostRating([FromBody]RatingForCreationDto ratingToPost)
        {
            using HttpResponseMessage userResponse = await _ratingClients.GetUserAsync(ratingToPost.UserId);
            if (userResponse.StatusCode == HttpStatusCode.NotFound)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.UserNotFoundEnum,
                    Message = "The user you are looking for is not found in the database."
                };
                _logger.LogError("Request contained nonexistent user");
                return NotFound(errorDto);
            }

            using HttpResponseMessage productResponse = await _ratingClients.GetProductAsync(ratingToPost.ProductId);
            if (productResponse.StatusCode == HttpStatusCode.NotFound)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.ProductNotFoundEnum,
                    Message = "The product you are looking for is not found in the database."
                };
                _logger.LogError("Request contained nonexistent product");
                return NotFound(errorDto);
            }

            var finalRating = _mapper.Map<Entities.Rating>(ratingToPost);

            _ratingRepository.AddRating(finalRating);

            await _ratingRepository.SaveChangesAsync();

            _logger.LogDebug("The rating has been successfully submitted!");

            var createdRatingToReturn = _mapper.Map<RatingDto>(finalRating);

            return CreatedAtRoute("GetRatingById", new { finalRating.Id }, createdRatingToReturn);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a product rating by its id</remarks>
        /// <param name="id">The id of the rating</param>
        /// <param name="rating">The rating value (e.g., 1-5)</param>
        /// <response code="200">The product rating with the given id is updated</response>
        /// <response code="404">The rating with the given id is not found</response>
        [HttpPut("rating/{id}")]
        [Consumes("application/json")]
        [SwaggerOperation("UpdateRatingById")]
        [SwaggerResponse(statusCode: 204, description: "Rating has been successfully updated")]
        [SwaggerResponse(statusCode: 400, type: typeof(GenericErrorDto), description: "Invalid id")]
        [SwaggerResponse(statusCode: 400, type: typeof(GenericErrorDto), description: "Invalid rating")]
        [SwaggerResponse(statusCode: 404, type: typeof(GenericErrorDto), description: "Rating not found")]
        public virtual async Task<IActionResult> UpdateRatingById([FromRoute][Required]int id, [FromBody]RatingForUpdateDto rating)
        {
            if (id < 1)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidRatingId,
                    Message = "Invalid rating id! Id has to be positive integer"
                };
                _logger.LogError("Request contained invalid id");
                return BadRequest(errorDto);
            }

            var ratingEntity = await _ratingRepository.GetRatingById(id);

            if (ratingEntity == null)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.RatingNotFoundEnum,
                    Message = "Rating with the given id does not exist"
                };
                _logger.LogError("Rating not found");
                return NotFound(errorDto);
            }

            _mapper.Map(rating, ratingEntity);
            await _ratingRepository.SaveChangesAsync();
            _logger.LogDebug("Rating has been successfully updated");

            return NoContent();
        }
    }
}
