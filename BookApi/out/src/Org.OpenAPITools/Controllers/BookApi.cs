/*
 * Books Microservice
 *
 * A service to store books and request data about them.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BookApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Deletes a book from the database</remarks>
        /// <param name="id">The id of the book</param>
        /// <response code="204">The book with the given id is deleted</response>
        /// <response code="404">The Book with the given id is not found</response>
        [HttpDelete]
        [Route("/book/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteBookById")]
        public virtual IActionResult DeleteBookById([FromRoute (Name = "Id")][Required]int id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gives back a stored book by it&#39;s id</remarks>
        /// <param name="id">The id of the book</param>
        /// <response code="200">A sucsessful response that gives back a book by id</response>
        /// <response code="404">The Book with the given id is not found</response>
        [HttpGet]
        [Route("/book/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("GetBookById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Book), description: "A sucsessful response that gives back a book by id")]
        public virtual IActionResult GetBookById([FromRoute (Name = "Id")][Required]int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Book));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"id\" : 0,\r\n  \"title\" : \"title\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Book>(exampleJson)
            : default(Book);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gives back a list of stored books</remarks>
        /// <response code="200">A sucsessful response that lists the stored books</response>
        [HttpGet]
        [Route("/books")]
        [ValidateModelState]
        [SwaggerOperation("GetBooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Book>), description: "A sucsessful response that lists the stored books")]
        public virtual IActionResult GetBooks()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Book>));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"id\" : 0,\r\n  \"title\" : \"title\"\r\n}, {\r\n  \"id\" : 0,\r\n  \"title\" : \"title\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Book>>(exampleJson)
            : default(List<Book>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates a book by it&#39;s id</remarks>
        /// <param name="id">The id of the book</param>
        /// <param name="title">The title of the book</param>
        /// <response code="200">The book with the given id is updated</response>
        /// <response code="404">The Book with the given id is not found</response>
        [HttpPut]
        [Route("/book/{Id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchBookById")]
        public virtual IActionResult PatchBookById([FromRoute (Name = "Id")][Required]int id, [FromBody]string title)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Adds a book to the database</remarks>
        /// <param name="title">The title of the book</param>
        /// <response code="201">The book with the given title is stored in the database</response>
        [HttpPost]
        [Route("/book")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostBook")]
        public virtual IActionResult PostBook([FromBody]string title)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }
    }
}
