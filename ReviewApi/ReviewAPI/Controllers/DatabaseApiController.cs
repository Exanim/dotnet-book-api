/*
 * Review Microservice
 *
 * This microservice is a part of our Intern playground API collection. Its intended function is to store reviews of products, and be able to search for reviews based on the author of the review and/or the product the review is written about. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: martin-tibor.sandor@capgemini.com
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using ReviewAPI.Models;
using ReviewAPI.Services;
using AutoMapper;
using ReviewAPI.Services.Caching;
using ReviewAPI.Services.Clients;
using ReviewAPI.CustomErrors;

namespace ReviewAPI.Controllers
{

    public class DatabaseApiController : IDatabaseApiController
    {
        private readonly ILogger<DatabaseApiController> _logger;
        private readonly IMapper _mapper;
        private readonly IReviewRepository _reviewRepository;
        private readonly IUserClient _userClient;
        private readonly IProductClient _productClient;

        public DatabaseApiController(
            ILogger<DatabaseApiController> logger,
            IMapper mapper,
            IReviewRepository reviewRepository,
            IUserClient userClient,
            IProductClient productClient)
        {
            _logger = logger
                ?? throw new ArgumentNullException(nameof(logger));
            _mapper = mapper 
                ?? throw new ArgumentNullException(nameof(mapper));
            _reviewRepository = reviewRepository 
                ?? throw new ArgumentNullException(nameof(reviewRepository));
            _userClient = userClient
                ?? throw new ArgumentException(nameof(userClient));
            _productClient = productClient
                ?? throw new ArgumentException(nameof(productClient));
        }


        public async override Task<ActionResult> GetReviews([FromQuery(Name = "userId")] int? userId, [FromQuery(Name = "productId")] int? productId)
        {
            var reviewEntities = await _reviewRepository.GetReviewsAsync(userId, productId);

            var results = _mapper.Map<IEnumerable<ReviewDto>>(reviewEntities);

            _logger.LogDebug("Successfully listed all elements in the database");
            return Ok(results);
        }


        public async override Task<IActionResult> GetReviewById([FromRoute(Name = "reviewId")][Required] int reviewId)
        {
            try
            {
                var review = await _reviewRepository.GetReviewByIdAsync(reviewId);

                _logger.LogDebug("Request GetReviewById successfully handled");
                return Ok(_mapper.Map<ReviewDto>(review));
            }
            catch(InvalidIdException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidIdEnum,
                    Message = ex.Message
                };
                _logger.LogError("Request contained invalid ID");
                return BadRequest(errorDto);
            }
            catch(ReviewNotFoundException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.ReviewNotFoundEnum,
                    Message = ex.Message
                };
                _logger.LogError("Requested ID not found");
                return NotFound(errorDto);
            }
        }

        
        public async override Task<ActionResult> CreateReview([FromBody] ReviewForCreationDto reviewToUpload)
        {
            try
            {
                //First check user and product caches, and if entry is not found, check the databases of respective servers
                if (!await _userClient.DoesUserExistAsync(reviewToUpload.UserId))
                {
                    throw new UserNotFoundException("The user you are looking for is not found in the database.", null);
                }
                _logger.LogDebug("User confirmed to exist.");

                if (!await _productClient.DoesProductExistAsync(reviewToUpload.ProductId))
                {
                    throw new ProductNotFoundException("The product you are looking for is not found in the database.", null);
                }
                _logger.LogDebug("Product confirmed to exist.");

                //Map Dto to Entity
                var finalReview = _mapper.Map<Entities.Review>(reviewToUpload);

                _reviewRepository.AddReview(finalReview);
                await _reviewRepository.SaveChangesAsync();
                _logger.LogDebug("The database entry has been successfully created");

                var createdReviewToReturn = _mapper.Map<ReviewDto>(finalReview);
                return CreatedAtRoute("GetReviewById", new
                {
                    reviewId = finalReview.ReviewId
                }, createdReviewToReturn);
            }

            catch (UserNotFoundException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.UserNotFoundEnum,
                    Message = ex.Message
                };
                _logger.LogError("Request contained nonexistent user");
                return NotFound(errorDto);
            }
            catch (ProductNotFoundException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.ProductNotFoundEnum,
                    Message = ex.Message
                };
                _logger.LogError("Request contained nonexistent product");
                return NotFound(errorDto);
            }
        }

        
        public async override Task<IActionResult> UpdateReview([FromRoute(Name = "reviewId")][Required] int reviewId, [FromBody] ReviewForUpdateDto reviewToUpdate)
        {
            try
            {
                var reviewEntity = await _reviewRepository.GetReviewByIdAsync(reviewId);

                _mapper.Map(reviewToUpdate, reviewEntity);
                _reviewRepository.SaveChangesAsync();
                _logger.LogDebug("Entry has been successfully updated");

                return NoContent();
            }
            catch (InvalidIdException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidIdEnum,
                    Message = ex.Message
                };
                _logger.LogError("Request contained invalid ID");
                return BadRequest(errorDto);
            }

            catch (ReviewNotFoundException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.ReviewNotFoundEnum,
                    Message = ex.Message
                };
                _logger.LogError("Requested ID not found");
                return NotFound(errorDto);
            }
        }

        
        public async override Task<IActionResult> DeleteReview([FromRoute(Name = "reviewId")][Required] int reviewId)
        {
            try
            {
                var review = await _reviewRepository.GetReviewByIdAsync(reviewId);

                _reviewRepository.DeleteReview(review);
                await _reviewRepository.SaveChangesAsync();
                _logger.LogDebug($"Review with id {review.ReviewId} and content:\n {review.ProductReview}\n has been successfully deleted");
                return NoContent();
            }
            catch (InvalidIdException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.InvalidIdEnum,
                    Message = ex.Message
                };
                _logger.LogError("Request contained invalid ID");
                return BadRequest(errorDto);
            }

            catch (ReviewNotFoundException ex)
            {
                GenericErrorDto errorDto = new GenericErrorDto()
                {
                    ErrorCode = GenericErrorDto.ErrorCodeEnum.ReviewNotFoundEnum,
                    Message = ex.Message
                };
                _logger.LogError("Requested ID not found");
                return NotFound(errorDto);
            }
        }
    }
}
