/*
 * Review Microservice
 *
 * This microservice is a part of our Intern playground API collection. Its intended function is to store reviews of products, and be able to search for reviews based on the author of the review and/or the product the review is written about. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: martin-tibor.sandor@capgemini.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;


namespace ReviewAPI.Models
{ 
    /// <summary>
    /// Provides information of why the request has failed
    /// </summary>
    [DataContract]
    public partial class GenericErrorDto : IEquatable<GenericErrorDto>
    {

        /// <summary>
        /// Represents an error code describing the problem:   - GenericError: Represents an unknown error   - ReviewNotFound: No review was found with the given ID   - InvalidId: The review ID is malformed 
        /// </summary>
        /// <value>Represents an error code describing the problem:   - GenericError: Represents an unknown error   - ReviewNotFound: No review was found with the given ID   - InvalidId: The review ID is malformed </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum GenericErrorEnum for GenericError
            /// </summary>
            [EnumMember(Value = "GenericError")]
            GenericErrorEnum = 1,
            
            /// <summary>
            /// Enum ReviewNotFoundEnum for ReviewNotFound
            /// </summary>
            [EnumMember(Value = "ReviewNotFound")]
            ReviewNotFoundEnum = 2,
            
            /// <summary>
            /// Enum InvalidIdEnum for InvalidId
            /// </summary>
            [EnumMember(Value = "InvalidId")]
            InvalidIdEnum = 3,

            /// <summary>
            /// Enum UserNotFoundEnum for nonexistent User
            /// </summary>
            [EnumMember(Value = "UserNotFound")]
            UserNotFoundEnum = 4,

            /// <summary>
            /// Enum ProductNotFoundEnum for nonexistent Product
            /// </summary>
            [EnumMember(Value = "ProductNotFound")]
            ProductNotFoundEnum = 5
        }

        /// <summary>
        /// Represents an error code describing the problem:   - GenericError: Represents an unknown error   - ReviewNotFound: No review was found with the given ID   - InvalidId: The review ID is malformed    - UserNotFound: The userId supplied in the review cannot be found in the UserApi database    - ProductNotFound: The productId supplied in the review cannot be found in the ProductApi database
        /// </summary>
        /// <value>Represents an error code describing the problem:   - GenericError: Represents an unknown error   - ReviewNotFound: No review was found with the given ID   - InvalidId: The review ID is malformed    - UserNotFound: The userId supplied in the review cannot be found in the UserApi database    - ProductNotFound: The productId supplied in the review cannot be found in the ProductApi database</value>
        /// <example>GenericError</example>
        [DataMember(Name="ErrorCode", EmitDefaultValue=true)]
        public ErrorCodeEnum ErrorCode { get; set; }

        /// <summary>
        /// A human readable explanation of the problem.
        /// </summary>
        /// <value>A human readable explanation of the problem.</value>
        /// <example>An unknown error occurred.</example>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenericErrorDto {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GenericErrorDto)obj);
        }

        /// <summary>
        /// Returns true if GenericErrorDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GenericErrorDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenericErrorDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ErrorCode == other.ErrorCode ||
                    
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GenericErrorDto left, GenericErrorDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GenericErrorDto left, GenericErrorDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
