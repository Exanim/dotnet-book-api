/*
 * Products Microservice
 *
 * A service to post and get product data
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Products.Api.Attributes;
using Products.Api.Models;
using Products.Api.Services;

using Products.Api.Entities; 
using System.Diagnostics;
using AutoMapper;

namespace Products.Api.Controllers
{
    [Route("/products")]
    [ApiController]
    public class ProductApiController : ProductApi
    {
        private readonly IProductRepository _productDatabase;
        private readonly IMapper _mapper;
        
        public ProductApiController(IProductRepository productDatabase, IMapper mapper)
        {       
            _productDatabase = productDatabase ?? throw new ArgumentNullException(nameof(productDatabase));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }

        public override async Task<IActionResult> AddProduct([FromBody] ProductDto productDtoToAdd)
        {
            var productToAdd = _mapper.Map<Product>(productDtoToAdd);
            _productDatabase.AddProduct(productToAdd);
            int Id = productToAdd.Id;
            await _productDatabase.SavechangesAsync();
            return CreatedAtRoute("GetProduct", routeValues: new { productId = productToAdd.Id }, productToAdd);
        }
        
        
        [HttpGet("{productId}", Name = "GetProduct")]
        public override async Task<IActionResult> GetProductById([FromRoute (Name = "productId")][Required]int productId)
        {
            //if (productId == null) { return BadRequest(); }
            if(!await _productDatabase.ProductExists(productId)) { return NotFound(); }
            var product = await _productDatabase.GetProduct(productId);
            var productToReturn = _mapper.Map<ProductWithIdDto>(product);
            return new ObjectResult(productToReturn);
        }
        
        
        public override async Task<IActionResult> GetProducts()
        {
            var productEntities = await _productDatabase.GetProducts();
            return Ok(_mapper.Map<IEnumerable<ProductWithIdDto>>(productEntities));
        }
        
        public override async Task<IActionResult> DeleteProduct(int productId)
        {
            if (!_productDatabase.DeleteProduct(productId)) { return NotFound(); }
            await _productDatabase.SavechangesAsync();
            return NoContent();
        }

        public override async Task<IActionResult> UpdateProduct([FromRoute(Name = "productId")][Required] int productId, [FromBody] ProductDto productToAdd)
        {
            if (!await _productDatabase.ProductExists(productId)) { return NotFound(); }
            var product = await _productDatabase.GetProduct(productId);
            _mapper.Map(productToAdd, product);
            await _productDatabase.SavechangesAsync();
            return NoContent();
        }
    }
}
